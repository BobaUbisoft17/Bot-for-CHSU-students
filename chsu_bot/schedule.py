"""–ú–æ–¥—É–ª—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç."""

import datetime


class Schedule:
    """–ö–ª–∞—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç."""

    def __init__(self) -> None:
        self.week_days = {
            "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
            "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
            "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
            "Wednesday": "—Å—Ä–µ–¥–∞",
            "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
            "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
            "Saturday": "—Å—É–±–±–æ—Ç–∞",
        }

    def render(self, unparse_schedule: list[dict[str, str]]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ."""
        schedule = ""
        if unparse_schedule != []:
            for i in range(len(unparse_schedule)):
                if i == 0:
                    date = unparse_schedule[i]["dateEvent"]
                    schedule += (
                        f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date} - "
                        f"{self.get_week_day(date)}*\n\n"
                    )
                schedule += self.get_duration_lesson(unparse_schedule[i])
                schedule += self.get_lesson_and_type(unparse_schedule[i])
                schedule += self.get_lecture(unparse_schedule[i])
                schedule += self.get_auditory(unparse_schedule[i])
            return schedule
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    @staticmethod
    def get_duration_lesson(lecture: dict[str, str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è."""
        return f"‚åö {lecture['startTime']}-{lecture['endTime']}\n"

    @staticmethod
    def get_lesson_and_type(lecture: dict[str, str]) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –∏ –µ–≥–æ —Ç–∏–ø–∞."""
        if lecture["abbrlessontype"] is None:
            return f"üè´ {lecture['discipline']['title']}\n"
        return (
            f"üè´ {lecture['abbrlessontype']}. "
            f"{lecture['discipline']['title']}\n"
        )

    @staticmethod
    def get_lecture(lecture: dict[str, str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π."""
        lecturers = []
        for lecturer in lecture["lecturers"]:
            lecturers.append(lecturer["shortName"])

        return f"üßë {', '.join(lecturers)}\n"

    @staticmethod
    def get_auditory(lecture: dict[str, str]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
        if lecture["onlineEvent"] is not None:
            return "üè¢ –û–Ω–ª–∞–π–Ω\n\n"
        elif lecture["auditory"] is None:
            return "üè¢ -/-\n\n"
        elif lecture["build"] is None:
            return f"üè¢ {lecture['auditory']['title']}"
        return (
            f"üè¢ {lecture['auditory']['title']}, "
            f"{lecture['build']['title'].lower()}\n\n"
        )

    def get_week_day(self, date: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        day, month, year = map(int, date.split("."))
        return self.week_days[
            datetime.date(year=year, month=month, day=day).strftime("%A")
        ]
