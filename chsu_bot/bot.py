"""–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram."""

import datetime
import logging

import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text as TextFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from db import (
    change_user_group,
    check_user_group,
    get_group_id,
    get_user_group,
    check_group_name,
    create_table,
    add_groups_ids,
    check_user_id,
    add_user_id,
)
from parse import get_schedule, get_groups_ids
from keyboard import (
    HELP,
    kb_greeting,
    kb_schedule,
    kb_change_group,
    kb_memory_group,
    first_pt_groups,
    second_pt_groups,
    CalendarMarkup
)
from utils import (
    valid_date,
    formated_date,
    valid_range_length
)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv("BOTTOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())


class Get_schedule(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–Ω—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞."""

    date = State()
    group = State()


class Memory_group(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    group_name = State()


class Another_day(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–Ω—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ '–¥—Ä—É–≥–æ–π –¥–µ–Ω—å'."""

    date = State()
    group = State()


class Another_range(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∞—Ç –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç."""

    start_date = State()
    end_date = State()
    group = State()


@dp.message_handler(commands="start")
async def send_welcome(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if not (await check_user_id(message.from_user.id)):
        await add_user_id(message.from_user.id)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!!!\n–Ø –±–æ—Ç, —É–ø—Ä–æ—â–∞—é—â–∏–π –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ß–ì–£",
        reply_markup=kb_greeting,
    )


@dp.message_handler(TextFilter(equals="–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
async def get_date(message: types.Message):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    if not await check_user_id(message.from_user.id):
        await add_user_id(message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb_schedule)


@dp.message_handler(TextFilter(equals=["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –∑–∞–≤—Ç—Ä–∞"]))
async def get_td_tm_schedule(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞.
    
    –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –ë–î, –≤—ã–≤–æ–¥–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∂–¥—ë—Ç –≥—Ä—É–ø–ø—É
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if message.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        date = datetime.datetime.now().strftime("%d.%m.%Y")
    else:
        date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime(
            "%d.%m.%Y"
        )

    if await check_user_group(message.from_user.id):
        group_id = await get_user_group(message.from_user.id)
        schedule = (await get_schedule(group_id, date))[0]
        await message.answer(
            text=schedule,
            reply_markup=kb_schedule,
            parse_mode="Markdown"
        )
    else:
        async with state.proxy() as data:
            data["date"] = date

        await Get_schedule.group.set()
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", reply_markup=(await first_pt_groups())
        )


@dp.message_handler(state=Get_schedule.group)
async def get_group(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –≤–∞–ª–∏–¥–Ω–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ,
    —Ç–æ –≤—ã–ø–ª–Ω—è–µ—Ç –∏—Ö.
    –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb_schedule)
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await second_pt_groups()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await first_pt_groups()
        )
    elif await check_group_name(message.text):
        group_id = await get_group_id(message.text)
        async with state.proxy() as data:
            schedule = (
                await get_schedule(
                    group_id=group_id,
                    start_date=data["date"]
                    )
                )[0]
            await message.answer(
                text=schedule,
                reply_markup=kb_schedule,
                parse_mode="Markdown"
            )
        await state.finish()
    else:
        await Get_schedule.group.set()
        await message.reply("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@dp.message_handler(TextFilter(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings(message: types.Message):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not await check_user_id(message.from_user.id):
        await add_user_id(message.from_user.id)
    if await check_user_group(message.from_user.id):
        keyboard = kb_change_group
    else:
        keyboard = kb_memory_group

    await message.answer(text="–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=keyboard)


@dp.message_handler(TextFilter(equals="–ó–∞–ø–æ–º–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"))
async def change_group(message: types.Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    if await check_user_group(message.from_user.id):
        await message.reply(text="–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè")
    else:
        await Memory_group.group_name.set()
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", reply_markup=(await first_pt_groups())
        )


@dp.message_handler(TextFilter(equals="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"))
async def change_group(message: types.Message):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if await check_user_group(message.from_user.id):
        await Memory_group.group_name.set()
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", reply_markup=(await first_pt_groups())
        )
    else:
        await message.reply(text="–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè")


@dp.message_handler(state=Memory_group.group_name)
async def get_group_name(message: types.Message, state: FSMContext):
    """–°–æ—Å–æ—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
            reply_markup=kb_greeting,
        )
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await second_pt_groups()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await first_pt_groups()
        )
    elif await check_group_name(message.text):
        if await get_user_group(message.from_user.id) != await get_group_id(message.text):
            await change_user_group(
                user_id=message.from_user.id,
                group=message.text
            )
            await state.finish()
            await message.answer(
                text="–Ø –í–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª.\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ –ø—Ä–∏–¥—ë—Ç—å—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
                reply_markup=kb_greeting,
            )
        else:
            await Memory_group.group_name.set()
            await message.answer(
                text="–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–º–∏",
                reply_markup=await first_pt_groups()
            )
    else:
        await Memory_group.group_name.set()
        await message.reply("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@dp.message_handler(TextFilter(equals="–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ"))
async def delete_user_group(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if await check_user_group(message.from_user.id):
        await change_user_group(user_id=message.from_user.id, group=0)
        await message.answer(
            text="–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ —É–¥–∞–ª–µ–Ω—ã", reply_markup=kb_greeting
        )


@dp.message_handler(TextFilter(equals="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å"))
async def choice_another_day(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    await Another_day.date.set()
    current_date = datetime.datetime.now()
    current_month = current_date.month
    current_year = current_date.year
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=CalendarMarkup(current_month, current_year).build.kb,
    )


@dp.callback_query_handler(state=Another_day.date)
async def choose_another_day(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    
    –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞—Ç—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if "date" in callback.data:
        start_day = formated_date(callback.data.split()[1])
        if await check_user_group(callback.from_user.id):
            group_id = await get_user_group(callback.from_user.id)
            await state.finish()
            await bot.delete_message(callback.from_user.id, callback.message.message_id)
            schedule = (await get_schedule(group_id, start_day))[0]
            await callback.message.answer(text=schedule, reply_markup=kb_schedule, parse_mode="Markdown")
        else:
            async with state.proxy() as data:
                data["date"] = start_day
            await Another_day.next()
            await bot.delete_message(callback.from_user.id, callback.message.message_id)
            await callback.message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã",
                reply_markup=await first_pt_groups()
            )
    elif "next" in callback.data or "back" in callback.data:
        await change_month(callback)


@dp.message_handler(state=Another_day.group)
async def choose_group(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.text == "–ù–∞–∑–∞–¥":
        await Another_day.date.set()
        await change_day(message)
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await second_pt_groups()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await first_pt_groups()
        )
    elif await check_group_name(message.text):
        group_id = await get_group_id(message.text)
        async with state.proxy() as data:
            schedule = (await get_schedule(group_id, data["date"]))[0]
            await message.answer(text=schedule, reply_markup=kb_schedule, parse_mode="Markdown")
        await state.finish()
    else:
        await Another_day.group.set()
        await message.answer(
            text="–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        )


@dp.message_handler(TextFilter(equals="–í—ã–±—Ä–∞—Ç—å –¥–∏–∞–ø–æ–∑–æ–Ω"))
async def choose_range(message: types.Message):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    await Another_range.start_date.set()
    current_date = datetime.datetime.now()
    current_month = current_date.month
    current_year = current_date.year
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
        reply_markup=CalendarMarkup(current_month, current_year).build.kb,
    )


@dp.callback_query_handler(state=Another_range.start_date)
async def choose_start_day(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    if "date" in callback.data:
        start_date = formated_date(callback.data.split()[1])
        async with state.proxy() as data:
            data["start_date"] = start_date
        await Another_range.next()
        await callback.message.answer(
            text=(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                "(–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–≤–µ—Ä—Ö—É):"
            )
        )
    elif "next" in callback.data or "back" in callback.data:
        await change_month(callback)


@dp.callback_query_handler(state=Another_range.end_date)
async def choose_end_day(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    if "date" in callback.data:
        end_date = formated_date(callback.data.split()[1])
        async with state.proxy() as data:
            if valid_range_length(data["start_date"], end_date):
                if not valid_date(data["start_date"], end_date):
                    data["start_date"], end_date = end_date, data["start_date"]
                if await check_user_group(callback.from_user.id):
                    group_id = await get_user_group(callback.from_user.id)
                    await bot.delete_message(callback.from_user.id, callback.message.message_id)
                    await state.finish()
                    schedules = await get_schedule(group_id, data["start_date"], end_date)
                    for i in range(len(schedules) - 1):
                        await callback.message.answer(text=schedules[i], parse_mode="Markdown")
                    await callback.message.answer(text=schedules[-1], reply_markup=kb_schedule, parse_mode="Markdown")
                else:
                    data["end_date"] = end_date
                    await Another_range.next()
                    await bot.delete_message(callback.from_user.id, callback.message.message_id)
                    await callback.message.answer(
                        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã",
                        reply_markup=await first_pt_groups()
                    )
            else:
                await callback.message.answer(text=(
                    "–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω. "
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ "
                    "–Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 31 –¥–Ω—è. "
                    "(–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ)")
                )
    elif "next" in callback.data or "back" in callback.data:
        await change_month(callback)


@dp.message_handler(state=Another_range.group)
async def choose_group(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if message.text == "–ù–∞–∑–∞–¥":
        await Another_range.end_date.set()
        await change_day(message)
    elif await check_group_name(message.text):
        group_id = await get_group_id(message.text)
        async with state.proxy() as data:
            schedules = await get_schedule(group_id, data["start_date"], data["end_date"])
            await state.finish()
            for i in range(len(schedules) - 1):
                await message.answer(text=schedules[i], parse_mode="Markdown")
            await message.answer(text=schedules[-1], reply_markup=kb_schedule, parse_mode="Markdown")
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await second_pt_groups()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await first_pt_groups()
        )
    else:
        await Another_range.group.set()
        await message.answer(
            text="–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        )


@dp.message_handler(TextFilter(equals="–ù–∞–∑–∞–¥"))
async def back(message: types.Message):
    await message.answer(text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_greeting)


@dp.message_handler(TextFilter(equals="–ü–æ–º–æ—â—å"))
async def send_help(message: types.Message):
    await message.answer(
        text=HELP,
        reply_markup=kb_greeting
    )


async def change_month(callback: types.CallbackQuery):
    """–°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    month, year = map(int, callback.data.split()[1].split("."))
    calendar = CalendarMarkup(month, year)
    if "next" in callback.data:
        await callback.message.edit_reply_markup(
            reply_markup=calendar.next_month().kb
        )
    else:
        await callback.message.edit_reply_markup(
            reply_markup=calendar.previous_month().kb
        )


async def change_day(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ."""
    current_date = datetime.datetime.now()
    month = current_date.month
    year = current_date.year
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞",
        reply_markup=CalendarMarkup(month, year).build.kb
    )


def loop():
    """–°–æ–∑–¥–∞—ë—Ç —Ü–∏–∫–ª."""
    loop = asyncio.get_event_loop_policy().get_event_loop()
    return loop


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    loop().run_until_complete(create_table())
    resp = loop().run_until_complete(get_groups_ids())
    loop().run_until_complete(add_groups_ids(resp))
    executor.start_polling(dp, skip_updates=True)
