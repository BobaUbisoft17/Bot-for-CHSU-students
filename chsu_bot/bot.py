import datetime
import logging

import asyncio
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text as TextFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import MessageIsTooLong
from db import (
    change_user_group,
    check_user_group,
    get_group_id,
    get_user_group,
    check_group_name,
    create_table,
    add_groups_ids,
    check_user_id,
    add_user_id,
)
from parse import get_schedule, get_groups_ids
from keyboard import (
    HELP,
    back_button,
    kb_greeting,
    kb_schedule,
    kb_change_group,
    kb_memory_group,
    create_kb_first_pt,
    create_kb_second_pt,
)
from utils import date_is_valid

logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv("BOTTOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())


class Get_schedule(StatesGroup):
    date = State()
    group = State()


class Memory_group(StatesGroup):
    group_name = State()


class Another_date(StatesGroup):
    date = State()
    group = State()


@dp.message_handler(commands="start")
async def send_welcome(message: types.Message):
    if not (await check_user_id(message.from_user.id)):
        await add_user_id(message.from_user.id)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!!!\n–Ø –±–æ—Ç, —É–ø—Ä–æ—â–∞—é—â–∏–π –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –ß–ì–£",
        reply_markup=kb_greeting,
    )


@dp.message_handler(TextFilter(equals="–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
async def get_date(message: types.Message):
    if not await check_user_id(message.from_user.id):
        await add_user_id(message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb_schedule)


@dp.message_handler(TextFilter(equals=["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –∑–∞–≤—Ç—Ä–∞"]))
async def get_date(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        date = datetime.datetime.now().strftime("%d.%m.%Y")
    else:
        date = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime(
            "%d.%m.%Y"
        )

    if await check_user_group(message.from_user.id):
        group_id = await get_user_group(message.from_user.id)
        await message.answer(
            text=await get_schedule(
                group_id=group_id,
                start_date=date,
            ),
            reply_markup=kb_schedule,
        )
    else:
        async with state.proxy() as data:
            data["date"] = date

        await Get_schedule.group.set()
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", reply_markup=(await create_kb_first_pt())
        )


@dp.message_handler(state=Get_schedule.group)
async def get_group(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb_schedule)
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await create_kb_second_pt()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await create_kb_first_pt()
        )
    elif await check_group_name(message.text):
        group_id = await get_group_id(message.text)
        async with state.proxy() as data:
            await message.answer(
                text=await get_schedule(group_id=group_id, start_date=data["date"]),
                reply_markup=kb_schedule,
            )
        await state.finish()
    else:
        await Get_schedule.group.set()
        await message.reply("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@dp.message_handler(TextFilter(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings(message: types.Message):
    if not await check_user_id(message.from_user.id):
        await add_user_id(message.from_user.id)
    if await check_user_group(message.from_user.id):
        keyboard = kb_change_group
    else:
        keyboard = kb_memory_group

    await message.answer(text="–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=keyboard)


@dp.message_handler(TextFilter(equals="–ó–∞–ø–æ–º–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"))
async def change_group(message: types.Message):
    if await check_user_group(message.from_user.id):
        await message.reply(text="–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè")
    else:
        await Memory_group.group_name.set()
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", reply_markup=(await create_kb_first_pt())
        )


@dp.message_handler(TextFilter(equals="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"))
async def change_group(message: types.Message):
    if await check_user_group(message.from_user.id):
        await Memory_group.group_name.set()
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", reply_markup=(await create_kb_first_pt())
        )
    else:
        await message.reply(text="–ù–µ –ª–æ–º–∞–π—Ç–µ –º–µ–Ω—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üôè")


@dp.message_handler(state=Memory_group.group_name)
async def get_group_name(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
            reply_markup=kb_greeting,
        )
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await create_kb_second_pt()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await create_kb_first_pt()
        )
    elif await check_group_name(message.text):
        if await get_user_group(message.from_user.id) != await get_group_id(message.text):
            await change_user_group(
                user_id=message.from_user.id,
                group=message.text
            )
            await state.finish()
            await message.answer(
                text="–Ø –í–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ –ø—Ä–∏–¥—ë—Ç—å—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É",
                reply_markup=kb_greeting,
            )
        else:
            await Memory_group.group_name.set()
            await message.answer(
                text="–≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–º–∏",
                reply_markup=await create_kb_first_pt()
            )
    else:
        await Memory_group.group_name.set()
        await message.reply("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


@dp.message_handler(TextFilter(equals="–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ"))
async def delete_user_group(message: types.Message):
    if await check_user_group(message.from_user.id):
        await change_user_group(user_id=message.from_user.id, group=0)
        await message.answer(
            text="–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ —É–¥–∞–ª–µ–Ω—ã", reply_markup=kb_greeting
        )


@dp.message_handler(TextFilter(equals="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å"))
async def choice_another_day(message: types.Message):
    await Another_date.date.set()
    await message.answer(
        text=("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É: "
              "20.06.2004\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, "
              "—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É: 20.06.2004-01.07.2022"),
        reply_markup=back_button,
    )

"""–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å
   –í—ã–≥–ª—è–¥–∏—Ç –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, –∫–∞–∫ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
   –£–∂–µ –ª—É—á—à–µ, –Ω–æ –Ω—É–∂–Ω–æ –µ—â—ë –ª—É—á—à–µ"""
@dp.message_handler(state=Another_date.date)
async def an_date(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
            reply_markup=kb_schedule
        )
    elif await date_is_valid(message.text.split("-")):
        if len(message.text.split("-")) == 2:
            start_date, end_date = message.text.split("-")
        else:
            start_date, end_date = message.text, None
        if await check_user_group(message.from_user.id):
            group_id = await get_user_group(message.from_user.id)
            await state.finish()
            try:
                await message.answer(
                    text=await get_schedule(
                        group_id=group_id,
                        start_date=start_date,
                        end_date=end_date
                    ),
                    reply_markup=kb_schedule
                )
            except MessageIsTooLong:
                await Another_date.date.set()
                await message.answer(
                    text=("–í—ã –≤–≤–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω" 
                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—å—à–∏–º –¥–∏–∞–ø–æ–∑–æ–Ω–æ–º"),
                    reply_markup=back_button
                )
        else:
            async with state.proxy() as data:
                data["start_date"], data["end_date"] = start_date, end_date
            await Another_date.next()
            await message.reply(
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã",
                reply_markup=await create_kb_first_pt()
            )
    else:
        await Another_date.date.set()
        await message.answer(
            text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            reply_markup=back_button
        )


@dp.message_handler(state=Another_date.group)
async def get_group(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await message.answer(
            text=("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É: "
                  "20.06.2004\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥, "
                  "—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É: 20.06.2004-01.07.2022"),
            reply_markup=back_button
        )
    elif message.text == "–î–∞–ª—å—à–µ ¬ª":
        await message.answer(
            text="–ú–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await create_kb_second_pt()
        )
    elif message.text == "¬´ –û–±—Ä–∞—Ç–Ω–æ":
        await message.answer(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É...",
            reply_markup=await create_kb_first_pt()
        )
    elif await check_group_name(message.text):
        group_id = await get_group_id(message.text)
        async with state.proxy() as data:
            try:
                await message.answer(
                    text=await get_schedule(
                        group_id=group_id,
                        start_date=data["start_date"],
                        end_date=data["end_date"]
                    ),
                    reply_markup=kb_schedule
                )
            except MessageIsTooLong:
                await state.finish()
                await Another_date.date.set()
                await message.answer(
                    text=("–í—ã –≤–≤–µ–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω" 
                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Ç–æ–ª—å–∫–æ —Å –º–µ–Ω—å—à–∏–º –¥–∏–∞–ø–æ–∑–æ–Ω–æ–º"),
                    reply_markup=back_button
                )
        await state.finish()
    else:
        await Another_date.group.set()
        await message.answer(
            text="–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        )


@dp.message_handler(TextFilter(equals="–ù–∞–∑–∞–¥"))
async def back(message: types.Message):
    await message.answer(text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_greeting)


@dp.message_handler(TextFilter(equals="–ü–æ–º–æ—â—å"))
async def send_help(message: types.Message):
    await message.answer(
        text=HELP,
        reply_markup=kb_greeting
    )


def loop():
    loop = asyncio.get_event_loop_policy().get_event_loop()
    return loop


if __name__ == "__main__":
    loop().run_until_complete(create_table())
    resp = loop().run_until_complete(get_groups_ids())
    loop().run_until_complete(add_groups_ids(resp))
    executor.start_polling(dp, skip_updates=True)
