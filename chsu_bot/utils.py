"""–ú–æ–¥—É–ª—å –¥–ª—è —É—Ç–∏–ª–∏—Ç."""

import datetime
from typing import Dict, List, Tuple


days_of_week = {
    "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "—Å—Ä–µ–¥–∞",
    "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "—Å—É–±–±–æ—Ç–∞",
}


def read_json(json: List[Dict[str, str]]) -> Dict[str, str]:
    """–ß—Ç–µ–Ω–∏–µ json –∏ —Ä–µ–Ω–¥–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    schedule = {}
    for elem in json:
        date = elem["dateEvent"]
        title = f"*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date} - {get_week_day(date)}*"
        duration = get_duration_lesson(elem)
        lesson_name = get_lesson_and_type(elem)
        auditory = get_auditory(elem)
        lecture = get_lecture(elem)
        try:
            schedule[date] += (
                f"‚åö {duration}\nüè´ "
                f"{lesson_name}\nüßë "
                f"{lecture}\nüè¢ "
                f"{auditory}\n\n"
            )
        except KeyError:
            schedule[date] = (
                f"{title}\n\n‚åö "
                f"{duration}\nüè´ "
                f"{lesson_name}\nüßë "
                f"{lecture}\nüè¢ "
                f"{auditory}\n\n"
            )
    return schedule


def get_duration_lesson(json: Dict[str, str]) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏—è."""
    return f"{json['startTime']}-{json['endTime']}"


def get_lesson_and_type(json: Dict[str, str]) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –∏ –µ–≥–æ —Ç–∏–ø–∞."""
    if json["abbrlessontype"] is None:
        return f"{json['discipline']['title']}"
    return f"{json['abbrlessontype']}. {json['discipline']['title']}"


def get_auditory(json: Dict[str, str]) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    if json["onlineEvent"] is not None:
        return "–û–Ω–ª–∞–π–Ω"
    elif json["auditory"] is None:
        return "-/-"
    return f"{json['auditory']['title']}, {json['build']['title'].lower()}"


def get_lecture(json: Dict[str, str]) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π."""
    return ", ".join([lecture["shortName"] for lecture in json["lecturers"]])


def build_schedule(schedule: Dict[str, str]) -> List[str]:
    """–°–±–æ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º."""
    messages = []
    message = ""
    if "0" in schedule.keys():
        return [schedule["0"]]
    for lessons in schedule.values():
        if len(message + lessons) < 4096:
            message += lessons
        else:
            messages.append(message)
            message = lessons
    messages.append(message)
    return messages


def valid_range_length(start_date: str, end_date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω–µ."""
    start_date = datetime.datetime.strptime(start_date, "%d.%m.%Y")
    end_date = datetime.datetime.strptime(end_date, "%d.%m.%Y")
    return -31 <= (end_date - start_date).days <= 31


def valid_date(fst_date: str, snd_date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–∞—Ç."""
    fst_date = datetime.datetime.strptime(fst_date, "%d.%m.%Y")
    snd_date = datetime.datetime.strptime(snd_date, "%d.%m.%Y")
    return snd_date >= fst_date


def get_week_day(date: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    day, month, year = map(int, date.split("."))
    return days_of_week[
        datetime.date(year=year, month=month, day=day).strftime("%A")
    ]


def get_two_days_schedule(schedules: Dict[str, str]) -> Tuple[str, str]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ë–î."""
    today = datetime.datetime.now().strftime("%d.%m.%Y")
    tomorrow = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime(
        "%d.%m.%Y"
    )
    if "0" in schedules.keys():
        return [schedules["0"]] * 2
    if len(schedules) == 2:
        return [schedules[today], schedules[tomorrow]]
    elif len(schedules) == 1 and today in schedules.keys():
        return [schedules[today], "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]
    return ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", schedules[tomorrow]]
